{
  "apiVersion": "org.openapis.spec/v3",
  "kind": "OpenAPISchema",
  "metadata": {
    "name": "io.openshift.quota.v1.ClusterResourceQuota",
    "annotations": {
      "source-cluster": "nerc-ocp-prod"
    }
  },
  "definitions": {
    "io.openshift.quota.v1.ClusterResourceQuota": {
      "description": "ClusterResourceQuota mirrors ResourceQuota at a cluster scope.  This object is easily convertible to synthetic ResourceQuota object to allow quota evaluation re-use. \n Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "spec": {
          "description": "Spec defines the desired quota",
          "properties": {
            "quota": {
              "description": "Quota defines the desired quota",
              "properties": {
                "hard": {
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  },
                  "description": "hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
                  "type": "object"
                },
                "scopeSelector": {
                  "description": "scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.",
                  "properties": {
                    "matchExpressions": {
                      "description": "A list of scope selector requirements by scope of the resources.",
                      "items": {
                        "description": "A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.",
                        "properties": {
                          "operator": {
                            "description": "Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.",
                            "type": "string"
                          },
                          "scopeName": {
                            "description": "The name of the scope that the selector applies to.",
                            "type": "string"
                          },
                          "values": {
                            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [
                          "operator",
                          "scopeName"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "x-kubernetes-map-type": "atomic"
                },
                "scopes": {
                  "description": "A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.",
                  "items": {
                    "description": "A ResourceQuotaScope defines a filter that must match each object tracked by a quota",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "selector": {
              "description": "Selector is the selector used to match projects. It should only select active projects on the scale of dozens (though it can select many more less active projects).  These projects will contend on object creation through this resource.",
              "properties": {
                "annotations": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "AnnotationSelector is used to select projects by annotation."
                },
                "labels": {
                  "description": "LabelSelector is used to select projects by label.",
                  "x-kubernetes-map-type": "atomic"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "quota",
            "selector"
          ],
          "type": "object"
        },
        "status": {
          "description": "Status defines the actual enforced quota and its current usage",
          "properties": {
            "namespaces": {
              "description": "Namespaces slices the usage by project.  This division allows for quick resolution of deletion reconciliation inside of a single project without requiring a recalculation across all projects.  This can be used to pull the deltas for a given project."
            },
            "total": {
              "description": "Total defines the actual enforced quota and its current usage across all projects",
              "properties": {
                "hard": {
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  },
                  "description": "Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
                  "type": "object"
                },
                "used": {
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  },
                  "description": "Used is the current observed total usage of the resource in the namespace.",
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "total"
          ],
          "type": "object"
        }
      },
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "quota.openshift.io",
          "kind": "ClusterResourceQuota",
          "version": "v1"
        }
      ]
    }
  }
}
